/*
Spread Sheet Columns
1. Sales number (or index)
2. Stock #
3. Sales Rep
4. Fin Mgr (Finance Manager)
5. Financing
6. Customer Name
7. City
8. Vehicle Make
9. Trade
10. Actual Cash Value
11. Trade-in Allowance
12. Gross Profit
13. Gross Profit MTD (Month To Date)
14. F & I (Finance & Insurance)
15. F & I MTD
16. Holdback
17. Holdback MTD
18. Total
19. Total MTD
20. (Seems to be empty)
21. (Seems to be empty)

Table Relationships:
1. **Sales**: This table will contain information about each sale, including the sales number, stock #, vehicle make, actual cash value, trade-in allowance, gross profit, and total.
2. **Employees**: This table will list the employees with their roles (e.g., sales rep, finance manager).
3. **Customers**: This table will have details about the customers, including their names and cities.
4. **Financing**: This table will detail the financing method used for each sale.
5. **TradeIns**: This table will hold information about trade-ins, including the trade and its actual cash value.

here's the proposed database schema:
*/

Table Sales {
  SaleID integer [pk, increment]
  StockNumber varchar(255) [not null] /* Unique? */
  VehicleMake varchar(255) [not null]

  /* Tune these at some point and err chk for each */
  /* decimal(10,2) cap is 99999999.99 */
  ActualCashValue   decimal(10,2) [not null]
  TradeInAllowance  decimal(10,2) [not null] /* is this needed if we have trade member? IF trade member not null: not trade in. */
  GrossProfit       decimal(10,2) [not null]
  FinAndInsurance   decimal(10,2) [not null]
  Holdback          decimal(10,2) [not null]
  Total             decimal(10,2) [not null]
  /* Time of entering to the system */
  /* Could be useful for administrators */
  SaleTime timestamp [default: `now()`]

  EmployeeID int [not null, ref: > Employees.EmployeeID]
  CustomerID int [not null, ref: > Customers.CustomerID]
  FinancingID int [ref: > Financing.FinancingID]
  TradeInID int [ref: > TradeIns.TradeInID]
}

/* Do we want seperate tables for NewSales / Used Sales?
 * I'd assume they're going to be queried seperately anyways? */  
/* If so, we assume Sales as NewSales and UsedSales has the following extra members:

  LotPack   decimal(10,2) [not null]
  DaysInStock int
  Cost      decimal(10,2) [not null]
  ROI       decimal(2,2)  [not null]  -- percentage

  */

table MonthlySales {
  TimePeriod timestamp // incomplete time stamp with year/month?
  // or double timestamp one for month/one for year? Performance shouldn't matter much, just depends on how we want to construct our queries.
  /* may need to increase these? (only 10.00M) Whatever is reasonable.*/
  GrossProfit     decimal(10,2)
  FinAndInsurance decimal(10,2)
  Holdback        decimal(10,2)
  Total           decimal(10,2)
}

/* if we have the NewSales / UsedSales split, we also have these split? */

table Employees {
  EmployeeID int [pk, increment] /* one to many */
  Name varchar(255) [not null]
  EmployeeNumber varchar(255) [not null] /* Do we know if they have internal numbers they use in existing systems? */
  Password varchar(255) [not null] /* Either need password hash here or in seperate table for "users" of the system */
  Role varchar(255) [not null] // (e.g., Sales Rep, Finance Manager) -- maybe roles table for admin to be able to establish default/custom roles.
  CreatedOn timestamp [default: `now()`] /* extra metadata for Employee account creation */
  LastAccessed timestamp [default: `now()`] 
}

table Customers {
  CustomerID int [pk, increment] /* one to many */
  Name varchar(255) [not null]
  City varchar(255) [not null]
  /* Additional user info? Table only has City listed.. we could probably include Province in our forms also.*/
}

table Financing {
  FinancingID int [pk, increment] /* one to many */
  Method varchar(255) [not null, unique] // (e.g., BNS)
}

table TradeIns {
  TradeInID int [pk, increment] /* one to many */
  Trade varchar(255)            [not null]
  ActualCashValue decimal(10,2) [not null]
  TradeInTime timestamp [default: `now()`] /* is not really needed? */
}

/************* Other Tables: **********************/
/* Could include roles table to allow admin to "fine tune" default roles aswell as create
 * custom ones. */
// ex 
/*
table Roles {
  RoleID int [pk, increment]
  RoleName varchar(255)
  // various perms off of my head -- align these with Epics
  ReadPermission boolean [default: false] // allow user to read sales
  WritePermission boolean [default: false] // allow user to create sales
  ModifyPermission boolean [default: false] // allow user to modify previous sales
  EmployeePermission boolean [default: false] // allow user to manage employees (admin, manager/supervisor)
  // Other admin roles 
}
*/
/* Could include sessions table to allow the server to keep track of authenticated users
 * between restarts and allow multiple sessions with fixed expiry dates
 * -- up to bill how he wants to setup auth setup.
 */
  // example -- copied from nextauth default schema and converted to our schema style
 /*
 table Sessions {
    SessionID     INT [pk, increment, not null]
    EmployeeID    INTEGER [not null, ref: > Employees.EmployeeID]
    expires       TIMESTAMP(6) [not null]
    session_token VARCHAR(255) [not null]
    access_token  VARCHAR(255) [not null]
    created_at    TIMESTAMP(6) [not null, default: `now()`]
    updated_at    TIMESTAMP(6) [not null, default: `now()`]
 }
 */
// Need a table for sales goals? Since we need to track them.
// Need a table for notifications? Maybe simply just an employeeID and SalesID? Or discuss other approaches.


/*
**Relationships:**
- One sale can be associated with one employee, one customer, one financing method, and one trade-in.
 However, one employee can be associated with many sales, one customer can have many sales,
 one financing method can be used in many sales, and there can be many trade-ins associated with various sales.

Would you like a visual representation of this schema or any further details?
*/
