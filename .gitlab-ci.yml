stages:
  - deploy
  - build_typedoc
  - build_dbdocs
  - teardown

deploy_preview:
  stage: deploy
  except:
    - main
  script:
    - vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
    - vercel build --token=$VERCEL_TOKEN
    - DEPLOY_URL=$(vercel deploy --prebuilt  --token=$VERCEL_TOKEN)
    - echo "DEPLOY_URL=$DEPLOY_URL" >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env
  environment:
    name: "$CI_COMMIT_REF_SLUG"
    url: $DEPLOY_URL
    on_stop: end_deployment
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - .next/cache/

deploy_production:
  stage: deploy
  only:
    - main
  script:
    - vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    - vercel build --prod --token=$VERCEL_TOKEN
    - DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN)
    - echo "DEPLOY_URL=$DEPLOY_URL" >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env
  environment:
    name: "$CI_COMMIT_REF_SLUG"
    url: $DEPLOY_URL
    on_stop: end_deployment
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - .next/cache/

generate_typedoc_info:
  stage: build_typedoc
  # only main when done testing
  script:
    - npm run docs
    - rm -rf /var/www/docs/*
    - cp -r docs/* /var/www/docs/*
#  artifacts:

generate_dbdocs_info:
  stage: build_dbdocs
  # only main when done testing
  script:
    - dbdocs build src/data/database_schema.dbml --project="370 Binary Bandits"
  only:
    changes:
      - src/data/database_schema.dbml

#  artifacts:

# don't bother removing old ones from vercel, just remove from gitlab
end_deployment:
  stage: teardown
  script:
    - echo "Removing environment. $CI_COMMIT_REF_SLUG"
  when: manual
  environment:
    name: "$CI_COMMIT_REF_SLUG"
    action: stop
