stages:
  - build-deploy
  - docs
  - test
  - teardown


#default:
#  cache:
#    key: $CI_COMMIT_REF_SLUG
#    paths:
#      - .next/cache/
#      - .npm/
#  before_script:
#    - npm ci --cache .npm --prefer-offline

cache:
  # most npm libraries will only have 1 entry for the base project deps
  key: &global_cache_node_mods
    files:
      - package-lock.json
  paths:
    - node_modules/
  policy: pull  # prevent subsequent jobs from modifying cache

install:
  stage: .pre
  cache:
    # store npm cache for all branches (stores download pkg.tar.gz's)
    # will not be necessary for any other job
    - key: ${CI_JOB_NAME}
      paths:
        - .npm/
      when: on_success
      policy: pull-push

    - key:
        files:
          - package-lock.json
      paths:
        - node_modules/
      when: on_success
      policy: pull-push
  
  script:
    - npm ci --cache .npm --prefer-offline


deploy_generic_preview:
  stage: build-deploy
  except:
    - main
    - dev
    - alex
    - amir
    - bill
    - rudra
    - ryan
    - suchetan
    - tolu

  script:
    - vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
    - vercel build --token=$VERCEL_TOKEN
    - DEPLOY_URL=$(vercel deploy --prebuilt  --token=$VERCEL_TOKEN)
    - echo "DEPLOY_URL=$DEPLOY_URL" >> deploy.env

  artifacts:
    paths:
      - .next/
    reports:
      dotenv: deploy.env

  environment:
    name: "$CI_COMMIT_REF_SLUG"
    url: $DEPLOY_URL
    on_stop: end_deployment


deploy_user_preview:
  stage: build-deploy
  only:
    - dev
    - alex
    - amir
    - bill
    - rudra
    - ryan
    - suchetan
    - tolu

  script:
    - vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    - vercel build --token=$VERCEL_TOKEN
    - vercel deploy --prebuilt  --token=$VERCEL_TOKEN > deploy.env 2>error.txt
    - code=$?
    - if [ $code -eq 0 ]; then
    - deploymentUrl=`cat deploy.env`
    - vercel alias $deploymentUrl ${CI_COMMIT_REF_SLUG}.codeallergy.dev --token=$VERCEL_TOKEN
    - echo "DEPLOY_URL=$DEPLOY_URL" >> deploy.env
    - else
    - errorMessage=`cat error.txt`
    - echo "Error occurred with deployment $errorMessage"
    - fi

  artifacts:
    paths:
      - .next/
    reports:
      dotenv: deploy.env

  environment:
    name: "$CI_COMMIT_REF_SLUG"
    url: $DEPLOY_URL
    on_stop: end_deployment


deploy_production:
  stage: build-deploy

  only:
    - main

  script:
    - vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    - vercel build --prod --token=$VERCEL_TOKEN
    - DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN)
    - echo "DEPLOY_URL=$DEPLOY_URL" >> deploy.env

  artifacts:
    reports:
      dotenv: deploy.env

  environment:
    name: "$CI_COMMIT_REF_SLUG"
    url: $DEPLOY_URL
    on_stop: end_deployment


generate_storybook_main:
  stage: docs
  needs:
    - job: deploy_production
      artifacts: true

  only: [ main ]

  script:
    - npm run build-storybook
    - rm -rf /var/www/storybook/*
    - cp -r storybook-static/* /var/www/storybook

  environment:
    name: "storybook"
    url: https://storybook.codeallergy.dev


generate_storybook_dev:
  stage: docs

  only:
    - dev
    - test-stack

  script:
    - npm run build-storybook
    - rm -rf /var/www/storybook/*
    - cp -r storybook-static/* /var/www/dev.storybook

  environment:
    name: "storybook-dev"
    url: https://dev.storybook.codeallergy.dev


# still not working on my bash runner, setup later, run locally if you want.
#qodana-qa:
#  stage: test
#  only: main


test_storybook_main:
  stage: test

  only: [ main ]

  script:
    - npm run test-storybook -- --url https://storybook.codeallergy.dev


test_storybook_dev:
  stage: test

  only:
    - dev
    - test-stack

  script:
    - npm run test-storybook -- --url https://dev.storybook.codeallergy.dev

test:
  stage: test

  script:
    - npm run test


generate_typedoc_info:
  stage: docs

  only:
    - main
    - test-stack

  script:
    - npm install
    - npm run docs
    - rm -rf /var/www/docs/*
    - cp -r docs/* /var/www/docs

  environment:
    name: "Documentation"
    url: https://docs.codeallergy.dev


generate_dbdocs_info:
  stage: docs

  script:
    - dbdocs build src/data/database_schema.dbml --project="370 Binary Bandits"

  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - "src/data/database_schema.dbml"


# don't bother removing old ones from vercel, just remove from gitlab
end_deployment:
  stage: teardown

  script:
    - echo "Removing environment. $CI_COMMIT_REF_SLUG"

  when: manual

  environment:
    name: "$CI_COMMIT_REF_SLUG"
    action: stop
